/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2018 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package ti.stripe;

import androidx.activity.ComponentActivity;

import org.appcelerator.kroll.KrollFunction;
import org.appcelerator.kroll.KrollModule;
import org.appcelerator.kroll.KrollDict;
import org.appcelerator.kroll.annotations.Kroll;

import org.appcelerator.kroll.common.Log;
import org.appcelerator.titanium.TiApplication;

import com.stripe.android.PaymentConfiguration;
import com.stripe.android.paymentsheet.PaymentSheet;
import com.stripe.android.paymentsheet.PaymentSheetResult;

@Kroll.module(name="TitaniumStripe", id="ti.stripe")
public class TitaniumStripeModule extends KrollModule {

	private PaymentSheet paymentSheet;
	private String publishableKey = "";

	@Kroll.method
	public void initialize(KrollDict params) {
		publishableKey = params.getString("publishableKey");
		PaymentConfiguration.init(TiApplication.getAppRootOrCurrentActivity(), publishableKey);
	}

	@Kroll.method
	public void showPaymentSheet(KrollDict params) {
		KrollFunction callback = (KrollFunction) params.get("callback");
		String merchantDisplayName = params.getString("merchantDisplayName");
		String customerId = params.getString("customerId");
		String customerEphemeralKeySecret = params.getString("customerEphemeralKeySecret");
		String paymentIntentClientSecret = params.getString("paymentIntentClientSecret");
		KrollDict appearance = params.getKrollDict("appearance");

		if (callback == null || customerId == null || customerEphemeralKeySecret == null || paymentIntentClientSecret == null) {
			Log.e("TiStripe", "Missing required parameters: callback, customerId, customerEphemeralKeySecret or paymentIntentClientSecret");
			return;
		}

		PaymentSheet.CustomerConfiguration customerConfig = new PaymentSheet.CustomerConfiguration(
				customerId,
				customerEphemeralKeySecret
		);
		PaymentConfiguration.init(TiApplication.getInstance().getApplicationContext(), publishableKey);

		PaymentSheet.Configuration.Builder configuration = new PaymentSheet.Configuration.Builder("Example, Inc.")
				.customer(customerConfig)
				// Set `allowsDelayedPaymentMethods` to true if your business can handle payment methods
				// that complete payment after a delay, like SEPA Debit and Sofort.
				.allowsDelayedPaymentMethods(true);

		if (merchantDisplayName != null)	 {
			configuration.merchantDisplayName(merchantDisplayName);
		}

		if (appearance != null) {
			configuration.appearance(mappedAppearance(appearance));
		}

		paymentSheet = new PaymentSheet((ComponentActivity) TiApplication.getAppRootOrCurrentActivity(), paymentSheetResult -> {
			KrollDict event = new KrollDict();

			if (paymentSheetResult instanceof PaymentSheetResult.Canceled) {
				event.put("cancel", true);
			} else if (paymentSheetResult instanceof PaymentSheetResult.Failed) {
				event.put("success", false);
				event.put("error", ((PaymentSheetResult.Failed) paymentSheetResult).getError());
			} else if (paymentSheetResult instanceof PaymentSheetResult.Completed) {
				event.put("success", true);
			}

			callback.callAsync(getKrollObject(), event);
		});

		paymentSheet.presentWithPaymentIntent(
				paymentIntentClientSecret,
				configuration.build()
		);
	}

	private PaymentSheet.Appearance mappedAppearance(KrollDict params) {
		PaymentSheet.Appearance appearance = new PaymentSheet.Appearance();

		KrollDict colors = params.getKrollDict("colors");
		KrollDict font = params.getKrollDict("font");

		if (colors != null) {
			// TODO
		}

		if (font != null) {
			// TODO
		}

		return appearance;
	}
}

