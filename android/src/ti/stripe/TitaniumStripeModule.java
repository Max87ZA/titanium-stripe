/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2018 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package ti.stripe;

import androidx.activity.ComponentActivity;

import org.appcelerator.kroll.KrollModule;
import org.appcelerator.kroll.KrollDict;
import org.appcelerator.kroll.annotations.Kroll;

import org.appcelerator.titanium.TiApplication;
import org.appcelerator.kroll.common.TiConfig;

import com.stripe.android.CustomerSession;
import com.stripe.android.PaymentConfiguration;
import com.stripe.android.PaymentSession;
import com.stripe.android.PaymentSessionConfig;
import com.stripe.android.PaymentSessionData;
import com.stripe.android.model.Address;
import com.stripe.android.model.PaymentMethod;
import com.stripe.android.model.ShippingInformation;
import com.stripe.android.view.ShippingInfoWidget;

import java.util.Arrays;

@Kroll.module(name="TitaniumStripe", id="ti.stripe")
public class TitaniumStripeModule extends KrollModule {

	// Standard Debugging variables
	private static final String LCAT = "TitaniumStripeModule";
	private static final boolean DBG = TiConfig.LOGD;

	private String ephemeralKeyAPIURL = "";
	private PaymentSession paymentSession;

	@Kroll.method
	public void initialize(KrollDict params) {
		String publishableKey = params.getString("publishableKey");
		ephemeralKeyAPIURL = params.getString("ephemeralKeyAPIURL");
		PaymentConfiguration.init(TiApplication.getInstance().getApplicationContext(), publishableKey);

		// Create the PaymentSession
		paymentSession = new PaymentSession((ComponentActivity) TiApplication.getAppCurrentActivity(), createPaymentSessionConfig());

		// Attach your listener
		paymentSession.init(createPaymentSessionListener());

		CustomerSession.initCustomerSession(
				TiApplication.getAppRootOrCurrentActivity().getApplicationContext(),
				new TiEphemeralKeyProvider()
		);
	}

	@Kroll.method
	public void updatePaymentDetails(KrollDict params) {
		// TODO
	}

	@Kroll.method
	public void requestPayment(KrollDict params) {
		// TODO
	}

	// Helper

	private PaymentSessionConfig createPaymentSessionConfig() {
		return new PaymentSessionConfig.Builder()

				// hide the phone field on the shipping information form
				.setHiddenShippingInfoFields(
						ShippingInfoWidget.CustomizableShippingField.Phone
				)

				// make the address line 2 field optional
				.setOptionalShippingInfoFields(
						ShippingInfoWidget.CustomizableShippingField.Line2
				)

				// specify an address to pre-populate the shipping information form
				.setPrepopulatedShippingInfo(new ShippingInformation(
						new Address.Builder()
								.setLine1("123 Market St")
								.setCity("San Francisco")
								.setState("CA")
								.setPostalCode("94107")
								.setCountry("US")
								.build(),
						"Jenny Rosen",
						"4158675309")
				)

				// collect shipping information
				.setShippingInfoRequired(true)

				// collect shipping method
				.setShippingMethodsRequired(true)

				// specify the payment method types that the customer can use;
				// defaults to PaymentMethod.Type.Card
				.setPaymentMethodTypes(
						Arrays.asList(PaymentMethod.Type.Card)
				)

				// if `true`, will show "Google Pay" as an option on the
				// Payment Methods selection screen
				.setShouldShowGooglePay(true)

				.build();
	}

	private PaymentSession.PaymentSessionListener createPaymentSessionListener() {
		return new PaymentSession.PaymentSessionListener() {
			@Override
			public void onPaymentSessionDataChanged(PaymentSessionData data) {
				if (data.getUseGooglePay()) {
					// customer intends to pay with Google Pay
				} else {
					final PaymentMethod paymentMethod = data.getPaymentMethod();
					if (paymentMethod != null) {
						// Display information about the selected payment method
					}
				}

				// Update your UI here with other data
				if (data.isPaymentReadyToCharge()) {
					// Use the data to complete your charge - see below.
				}
			}

			@Override
			public void onCommunicatingStateChanged(boolean isCommunicating) {
				if (isCommunicating) {
					// update UI to indicate that network communication is in progress
				} else {
					// update UI to indicate that network communication has completed
				}
			}

			@Override
			public void onError(int errorCode, String errorMessage) {
				// handle error
			}
		};
	}
}

